Below is a complete guide to dockerize the Express implementation of the Notejam application (from the GitHub repo) so it connects to an external MongoDB database. This walkthrough covers every step from installation to running the app in containers.

1. Prerequisites
Docker & Docker Compose

Install Docker

Install Docker Compose

Git

Ensure Git is installed to clone the repository.

2. Clone the Repository
bash
Copy
Edit
# Clone the notejam repository
git clone https://github.com/komarserjio/notejam.git

# Navigate to the Express implementation
cd notejam/express/notejam
Your working directory should now be notejam/express/notejam, which contains the Express-based Notejam files (e.g., app.js, routes/, views/, package.json, etc.).

3. Project Folder Structure
Here is how the Express folder looks (simplified). We’ll add Docker-related files in this same directory:

java
Copy
Edit
notejam
└── express
    └── notejam
        ├── bin/
        ├── public/
        │   └── stylesheets/
        ├── routes/
        ├── test/
        ├── views/
        ├── app.js
        ├── helpers.js
        ├── package.json
        ├── settings.js
        └── ...
We will create two new files in this directory:

Dockerfile

docker-compose.yml

We’ll also add an .env file for environment variables (optional but recommended).

4. Create an .env File
In the notejam/express/notejam directory, create a file named .env with the following content (adjust as needed):

bash
Copy
Edit
# .env

# MongoDB connection details (service name is 'db' in docker-compose)
DB_HOST=db
DB_PORT=27017
DB_NAME=notejam

# Application port
PORT=3000
Note:
If you want to connect to an external MongoDB instance (not in Docker), replace DB_HOST with your external host/IP, and remove the depends_on for db in the docker-compose file later. The rest of the steps remain largely the same.

5. Update settings.js for MongoDB
The default Notejam Express implementation might use a different database (e.g., SQLite or an in-memory DB). Let’s update settings.js to ensure it reads our environment variables for MongoDB.

Open settings.js (in notejam/express/notejam) and confirm or modify the DB settings. For example:

js
Copy
Edit
// settings.js

require('dotenv').config(); // To load variables from .env

module.exports = {
  port: process.env.PORT || 3000,
  db: {
    // If you're using mongoose, for example:
    url: `mongodb://${process.env.DB_HOST || 'localhost'}:${process.env.DB_PORT || '27017'}/${process.env.DB_NAME || 'notejam'}`
  },
  // ... other settings
};
Important:
If the original code is not set up for MongoDB, you might need to install mongoose or another MongoDB client and replace the existing DB logic accordingly. The above snippet assumes you’ll be using Mongoose or a similar library to connect to MongoDB.

6. Create the Dockerfile
In notejam/express/notejam, create a file named Dockerfile:

dockerfile
Copy
Edit
# Dockerfile

# 1. Use an official Node.js runtime
FROM node:14-alpine

# 2. Create and set the working directory inside the container
WORKDIR /app

# 3. Copy package.json and package-lock.json
COPY package*.json ./

# 4. Install dependencies
RUN npm install

# 5. Copy the rest of the application code
COPY . .

# 6. Expose the port
EXPOSE 3000

# 7. Define the command to start the application
CMD ["npm", "start"]
Explanation:

Use the node:14-alpine image (lightweight Node environment).

Set /app as the working directory.

Copy over package.json and package-lock.json for dependency installation.

Install the dependencies via npm install.

Copy the remaining source files into the container.

Expose port 3000 (or whichever port your app uses).

Start the app with npm start.

7. Create the docker-compose.yml
In the same directory (notejam/express/notejam), create docker-compose.yml:

yaml
Copy
Edit
version: '3'
services:
  notejam:
    build: .
    container_name: notejam_express
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - db
    # If you need to run migrations or anything else, you can add:
    # command: "npm run migrate && npm start"

  db:
    image: mongo:latest
    container_name: notejam_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
Explanation:

notejam service:

build: Uses the Dockerfile in the current directory (.).

container_name: (Optional) Name the container for clarity.

ports: Maps container port 3000 to host port 3000.

env_file: Loads environment variables from .env.

depends_on: Ensures the db service (MongoDB) is started before the app tries to connect.

db service:

image: Uses the official MongoDB image from Docker Hub.

container_name: (Optional) Name the MongoDB container.

ports: Maps MongoDB’s default port 27017 to the host.

volumes: Uses a named volume (mongo_data) to persist data.

volumes: Named volume for storing MongoDB data so it persists across container restarts.

8. Modify package.json (If Needed)
If your package.json does not have a start script that launches app.js, you can add one:

jsonc
Copy
Edit
{
  "scripts": {
    "start": "node app.js"
  },
  // ...
}
Make sure your code in app.js actually starts the Express server on the port specified in settings.js.

9. Build and Run the Containers
From inside notejam/express/notejam, run:

bash
Copy
Edit
docker-compose up --build
--build ensures a fresh build of the Docker image.

Docker will build the notejam service, pull the MongoDB image, and start both containers.

When it finishes, you should see logs indicating that the Express app is running and that MongoDB is ready.

10. Verify the Application
Open the browser to http://localhost:3000 (or whatever port you mapped).

Check logs in the terminal. You should see something like “Server listening on port 3000” (or your chosen port) and successful DB connection messages if you implemented them.

11. Final Folder Structure
After adding the Docker and environment files, your notejam/express/notejam directory might look like this:

bash
Copy
Edit
notejam/
└── express/
    └── notejam/
        ├── bin/
        ├── public/
        │   └── stylesheets/
        ├── routes/
        ├── test/
        ├── views/
        ├── app.js
        ├── helpers.js
        ├── package.json
        ├── settings.js
        ├── .env               # Environment variables
        ├── Dockerfile         # Docker instructions
        ├── docker-compose.yml # Compose for the app & MongoDB
        └── package-lock.json  # (if present)
12. Optional: Connecting to an External MongoDB
If you want to connect to an external MongoDB (not Dockerized), do the following:

Remove the db service from docker-compose.yml and the depends_on: - db line.

In your .env, set DB_HOST to the actual hostname or IP of your external DB.

Adjust DB_PORT and DB_NAME accordingly.

Run docker-compose up --build to start only the Notejam container.

Conclusion
You now have a fully dockerized Notejam Express application connected to MongoDB. This setup is straightforward to deploy on any system running Docker, ensuring consistent environment and quick spin-up. If you need further adjustments (such as seeding data, running migrations, or customizing the database setup), you can modify your Docker Compose file or package.json scripts accordingly.

Happy coding!
